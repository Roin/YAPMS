% maze([[0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 1, 0 , 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]], (1, 1), (5, 3)).
%maze(MAZELIST, START, ZIEL) :- 
%findpath(MAZELIST, START, WALKABLE).

maze(MAZELIST, START, ZIEL, VISITED) :-
    check(MAZELIST, START, ZIEL, VISITED).

% TODO maybe add X to VISITED
check(MAZELIST, (CURROW, CURCOLUMN), (ZIEL1, ZIEL2), VISITED) :-
    CURROW =:= ZIEL1,
    CURCOLUMN =:= ZIEL2,
    getValue(MAZELIST, (CURROW, CURCOLUMN) , VALUE),
    VALUE =:= 0.



% check east unvisited
check(MAZELIST, (CURROW, CURCOLUMN), ZIEL, VISITED) :-
    CURCOLUMNI is CURCOLUMN+1,
    getValue(MAZELIST, (CURROW, CURCOLUMNI) , VALUE),
    VALUE =:= 0,
    \+ member((CURROW, CURCOLUMNI), VISITED),
    move(MAZELIST, (CURROW, CURCOLUMNI), ZIEL, VISITED).


% check south unvisited



% check west unvisited


% check north unvisited


% check west visited


% check south visited


% check east visited



% check north visited


move(MAZELIST, (CURROW, CURCOLUMN), ZIEL, VISITED) :-
    check(MAZELIST, (CURROW, CURCOLUMN), ZIEL, [(CURROW, CURCOLUMN)|VISITED]).







%findpath(MAZELIST, START, WALKABLE) :-
%    STARTROW = START1,
%    STARTCOLUMN = START2,
%    getValue(MAZELIST, START, VALUE).

isNotVisited(ROW, COLUMN, VISITED) :-
    \+isVisited(ROW, COLUMN, VISITED).

isVisited(ROW, COLUMN, []) :-
    false.

%isVisited(ROW, COLUMN, (X,Y)) :-
%    ROW =:= X,
%    COLUMN =:= Y.

isVisited(ROW, COLUMN, [(X,Y)|VISITED]) :-
    ROW =:= X,
    COLUMN =:= Y.

isVisited(ROW, COLUMN, [_|VISITED]) :-
    isVisited(ROW, COLUMN, VISITED).


getValue(MAZELIST, START, VALUE) :-
    inRow(MAZELIST, 1, 1, START, VALUE).

inRow([ROW|_], CURROW, CURCOLUMN, (STARTROW, STARTCOLUMN), VALUE) :-
    CURROW =:= STARTROW,
    inColumn(ROW, CURROW, CURCOLUMN, (STARTROW, STARTCOLUMN), VALUE).

inRow([_|RESTMAZE], CURROW, CURCOLUMN, (STARTROW, STARTCOLUMN), VALUE) :-
    CURROW < STARTROW,
    CURROWI is CURROW+1,
    inRow(RESTMAZE, CURROWI, CURCOLUMN, (STARTROW, STARTCOLUMN), VALUE).

inColumn([ELEMENT|_], CURROW, CURCOLUMN, (STARTROW, STARTCOLUMN), ELEMENT) :- 
    CURCOLUMN =:= STARTCOLUMN.

inColumn([_|RESTLIST], CURROW, CURCOLUMN, (STARTROW, STARTCOLUMN), VALUE) :-
    CURCOLUMN < STARTCOLUMN,
    CURCOLUMNI is CURCOLUMN+1,
    inColumn(RESTLIST, CURROW, CURCOLUMNI, (STARTROW, STARTCOLUMN), VALUE).
 
